{
    "departments": [
        {
            "name": "Computer Science",
            "courses": [
                {
                    "code": "CS 1100",
                    "title": "Computer Science and Its Applications",
                    "credits": 4,
                    "description": "Introduces students to the field of computer science and the patterns of thinking that enable them to become intelligent users of software tools in a problem-solving setting. Examines several important software applications so that students may develop the skills necessary to use computers effectively in their own disciplines.",
                    "corequisites": [
                        "CS 1101"
                    ],
                    "attributes": [
                        "NUpath Analyzing/Using Data"
                    ]
                },
                {
                    "code": "CS 1101",
                    "title": "Lab for CS 1100",
                    "credits": 1,
                    "description": "Accompanies CS 1100. Involves experiments and problem solving across multiple disciplines using computer science techniques and tools.",
                    "corequisites": [
                        "CS 1100"
                    ]
                },
                {
                    "code": "CS 1200",
                    "title": "First Year Seminar",
                    "credits": 1,
                    "description": "Seeks to support students in their transition to Northeastern and in their holistic development as they become responsible members of the college and university communities. Incorporates large group discussion, small group activities, and self-reflection in order to facilitate connections with faculty, staff, and peers; promote utilization of appropriate campus resources; and assist with academic and personal goal setting."
                },
                {
                    "code": "CS 1210",
                    "title": "Professional Development for Khoury Co-op",
                    "credits": 1,
                    "description": "Continues the preparation of students for careers in the computing and information fields by discussing co-op and co-op processes. Offers students an opportunity to prepare a professional resumé; practice proper interviewing techniques; explore current job opportunities; learn how to engage in the job and referral process; and to understand co-op policies, procedures, and expectations. Discusses professional behavior and ethical issues in the workplace.",
                    "prerequisites": [
                        "CS 2510 or DS 2500"
                    ]
                },
                {
                    "code": "CS 1800",
                    "title": "Discrete Structures",
                    "credits": 4,
                    "description": "Introduces the mathematical structures and methods that form the foundation of computer science. Studies structures such as sets, tuples, sequences, lists, trees, and graphs. Discusses functions, relations, ordering, and equivalence relations. Examines inductive and recursive definitions of structures and functions. Discusses principles of proof such as truth tables, inductive proof, and basic logic. Also covers the counting techniques and arguments needed to estimate the size of sets, the growth of functions, and the space-time complexity of algorithms.",
                    "corequisites": [
                        "CS 1802"
                    ],
                    "attributes": [
                        "NUpath Formal/Quant Reasoning"
                    ]
                },
                {
                    "code": "CS 1802",
                    "title": "Seminar for CS 1800",
                    "credits": 1,
                    "description": "Accompanies CS 1800. Illustrates topics from the lecture course through discussions, quizzes, and homework assignments.",
                    "corequisites": [
                        "CS 1800"
                    ]
                },
                {
                    "code": "CS 2500",
                    "title": "Fundamentals of Computer Science 1",
                    "credits": 4,
                    "description": "Introduces the fundamental ideas of computing and the principles of programming. Discusses a systematic approach to word problems, including analytic reading, synthesis, goal setting, planning, plan execution, and testing. Presents several models of computing, starting from nothing more than expression evaluation in the spirit of high school algebra. Assumes no prior programming experience; therefore, suitable for first-year students—majors, and nonmajors alike—who wish to explore the intellectual ideas in the discipline.",
                    "corequisites": [
                        "CS 2501"
                    ],
                    "attributes": [
                        "NUpath Formal/Quant Reasoning",
                        "NUpath Natural/Designed World"
                    ]
                },
                {
                    "code": "CS 2501",
                    "title": "Lab for CS 2500",
                    "credits": 1,
                    "description": "Accompanies CS 2500. Covers topics from the course through various experiments.",
                    "corequisites": [
                        "CS 2500"
                    ]
                },
                {
                    "code": "CS 2510",
                    "title": "Fundamentals of Computer Science 2",
                    "credits": 4,
                    "description": "Continues CS 2500. Examines object-oriented programming and associated algorithms using more complex data structures as the focus. Discusses nested structures and nonlinear structures including hash tables, trees, and graphs. Emphasizes abstraction, encapsulation, inheritance, polymorphism, recursion, and object-oriented design patterns. Applies these ideas to sample applications that illustrate the breadth of computer science.",
                    "prerequisites": [
                        "CS 2500"
                    ],
                    "corequisites": [
                        "CS 2511"
                    ],
                    "attributes": [
                        "NUpath Analyzing/Using Data",
                        "NUpath Natural/Designed World"
                    ]
                },
                {
                    "code": "CS 2511",
                    "title": "Lab for CS 2510",
                    "credits": 1,
                    "description": "Accompanies CS 2510. Covers topics from the course through various experiments.",
                    "corequisites": [
                        "CS 2510"
                    ]
                },
                {
                    "code": "CS 2800",
                    "title": "Logic and Computation",
                    "credits": 4,
                    "description": "Introduces formal logic and its connections to computer and information science. Offers an opportunity to learn to translate statements about the behavior of computer programs into logical claims and to gain the ability to prove such assertions both by hand and using automated tools. Considers approaches to proving termination, correctness, and safety for programs. Discusses notations used in logic, propositional and first order logic, logical inference, mathematical induction, and structural induction. Introduces the use of logic for modeling the range of artifacts and phenomena that arise in computer and information science.",
                    "prerequisites": [
                        "CS 1800 or MATH 1365 or MATH 2310",
                        "CS 2500"
                    ]
                },
                {
                    "code": "CS 2810",
                    "title": "Mathematics of Data Models",
                    "credits": 4,
                    "description": "Studies the methods and ideas in linear algebra, multivariable calculus, and statistics that are most relevant for the practicing computer scientist doing machine learning, modeling, or hypothesis testing with data. Covers least squares regression, finding eigenvalues to predict a linear system's behavior, performing gradient descent to fit a model to data, and performing t-tests and chi-square tests to determine whether differences between populations are significant. Includes applications to popular machine-learning methods, including Bayesian models and neural networks.",
                    "prerequisites": [
                        "CS 1800",
                        "CS 2500"
                    ],
                    "attributes": [
                        "NUpath Analyzing/Using Data",
                        "NUpath Formal/Quant Reasoning"
                    ]
                },
                {
                    "code": "CS 2992",
                    "title": "Research",
                    "credits": 0,
                    "description": "Offers an opportunity to document student contributions to research projects or creative endeavors."
                },
                {
                    "code": "CS 3000",
                    "title": "Algorithms and Data",
                    "credits": 4,
                    "description": "Introduces the basic principles and techniques for the design, analysis, and implementation of efficient algorithms and data representations. Discusses asymptotic analysis and formal methods for establishing the correctness of algorithms. Considers divide-and-conquer algorithms, graph traversal algorithms, and optimization techniques. Introduces information theory and covers the fundamental structures for representing data. Examines flat and hierarchical representations, dynamic data representations, and data compression. Concludes with a discussion of the relationship of the topics in this course to complexity theory and the notion of the hardness of problems.",
                    "prerequisites": [
                        "CS 2510 or DS 2500 or EECE 2160",
                        "CS 1800"
                    ],
                    "corequisites": [
                        "CS 3001"
                    ],
                    "attributes": [
                        "NUpath Formal/Quant Reasoning"
                    ]
                },
                {
                    "code": "CS 3001",
                    "title": "Recitation for CS 3000",
                    "credits": 0,
                    "description": "Accompanies CS 3000. Provides students with additional opportunities to ask questions and engage with course material.",
                    "corequisites": [
                        "CS 3000"
                    ]
                },
                {
                    "code": "CS 3200",
                    "title": "Introduction to Databases",
                    "credits": 4,
                    "description": "Studies the design of a database for use in a relational database management system. The entity-relationship model and normalization are used in problems. Relational algebra and then the SQL (structured query language) are presented. Advanced topics include triggers, stored procedures, indexing, elementary query optimization, and fundamentals of concurrency and recovery. Students implement a database schema and short application programs on one or more commercial relational database management systems.",
                    "prerequisites": [
                        "CS 2500 or DS 2000 or EECE 2560"
                    ],
                    "attributes": [
                        "NUpath Analyzing/Using Data"
                    ]
                },
                {
                    "code": "CS 3500",
                    "title": "Object-Oriented Design",
                    "credits": 4,
                    "description": "Presents a comparative approach to object-oriented programming and design. Discusses the concepts of object, class, meta-class, message, method, inheritance, and genericity. Reviews forms of polymorphism in object-oriented languages. Contrasts the use of inheritance and composition as dual techniques for software reuse: forwarding vs. delegation and subclassing vs. subtyping. Fosters a deeper understanding of the principles of object-oriented programming and design including software components, object-oriented design patterns, and the use of graphical design notations such as UML (unified modeling language). Basic concepts in object-oriented design are illustrated with case studies in application frameworks and by writing programs in one or more object-oriented languages.",
                    "prerequisites": [
                        "CS 2510 or EECE 2560"
                    ],
                    "corequisites": [
                        "CS 3501"
                    ],
                    "attributes": [
                        "NUpath Analyzing/Using Data",
                        "NUpath Natural/Designed World"
                    ]
                },
                {
                    "code": "CS 3501",
                    "title": "Lab for CS 3500",
                    "credits": 1,
                    "description": "Accompanies CS 3500. Covers topics from the course and provides students with additional opportunities to engage with course material.",
                    "corequisites": [
                        "CS 3500"
                    ]
                },
                {
                    "code": "CS 3520",
                    "title": "Programming in C++",
                    "credits": 4,
                    "description": "Examines how to program in C++ in a robust and safe manner. Reviews basics, including scoping, typing, and primitive data structures. Discusses data types (primitive, array, structure, class, string); addressing/parameter mechanisms (value, pointer, reference); stacks; queues; linked lists; binary trees; hash tables; and the design of classes and class inheritance, emphasizing single inheritance. Considers the instantiation of objects, the trade-offs of stack vs. heap allocation, and the design of constructors and destructors. Emphasizes the need for a strategy for dynamic memory management. Addresses function and operator overloading; templates, the Standard Template Library (STL), and the STL components (containers, generic algorithms, iterators, adaptors, allocators, function objects); streams; exception handling; and system calls for processes and threads.",
                    "prerequisites": [
                        "CS 2510 or DS 2500"
                    ]
                },
                {
                    "code": "CS 3540",
                    "title": "Game Programming",
                    "credits": 4,
                    "description": "Introduces the different subsystems used to create a 3D game, including rendering, animation, collision, physics, audio, trigger systems, game logic, behavior trees, and simple artificial intelligence. Offers students an opportunity to learn the inner workings of game engines and how to use multiple libraries such as physics and graphics libraries to develop a game. Discusses graphics pipeline, scene graph, level design, behavior scripting, object-oriented game design, world editors, and game scripting languages.",
                    "prerequisites": [
                        "CS 2500 or ARTG 2260 or ARTG 2262"
                    ]
                },
                {
                    "code": "CS 3620",
                    "title": "Building Extensible Systems",
                    "credits": 4,
                    "description": "Deals with the design of extensible software systems, which enable clients to add functionality both statically as well as dynamically. Examples of such systems are operating systems, game servers, and Web browsers. Describes the classic systems built on C-like languages with unsafe, manual memory control and the more recent systems built on Java-like languages with safe, automated memory management. Introduces the Rust programming language, which combines the efficiency of C with safe manual memory control via type specifications and compiler constraints. Offers students an opportunity to build systems using all three settings but focuses on the Rust approach. Students also have an opportunity to evaluate their work via essays and memos.",
                    "prerequisites": [
                        "CS 2510",
                        "ENGW 1111 or ENGW 1102 or ENGL 1111 or ENGL 1102"
                    ],
                    "attributes": [
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 3650",
                    "title": "Computer Systems",
                    "credits": 4,
                    "description": "Introduces the basic design of computing systems, computer operating systems, and assembly language using a RISC architecture. Describes caches and virtual memory. Covers the interface between assembly language and high-level languages, including call frames and pointers. Covers the use of system calls and systems programming to show the interaction with the operating system. Covers the basic structures of an operating system, including application interfaces, processes, threads, synchronization, interprocess communication, deadlock, memory management, file systems, and input/output control.",
                    "prerequisites": [
                        "CS 2510 or EECE 2560"
                    ]
                },
                {
                    "code": "CS 3700",
                    "title": "Networks and Distributed Systems",
                    "credits": 4,
                    "description": "Introduces the fundamentals of computer networks, including network architectures, network topologies, network protocols, layering concepts (for example, ISO/OSI, TCP/IP reference models), communication paradigms (point-to-point vs. multicast/broadcast, connectionless vs. connection oriented), and networking APIs (sockets). Also covers the construction of distributed programs, with an emphasis on high-level protocols and distributed state sharing. Topics include design patterns, transactions, performance trade-offs, security implications, and reliability. Uses examples from real networks (TCP/IP, Ethernet, 802.11) and distributed systems (Web, BitTorrent, DNS) to reinforce concepts.",
                    "prerequisites": [
                        "CS 2510"
                    ]
                },
                {
                    "code": "CS 3800",
                    "title": "Theory of Computation",
                    "credits": 4,
                    "description": "Introduces the theory behind computers and computing aimed at answering the question, What are the capabilities and limitations of computers? Covers automata theory, computability, and complexity. The automata theory portion includes finite automata, regular expressions, nondeterminism, nonregular languages, context-free languages, pushdown automata, and noncontext-free languages. The computability portion includes Turing machines, the Church-Turing thesis, decidable languages, and the Halting theorem. The complexity portion includes big-O and small-o notation, the classes P and NP, the P vs. NP question, and NP-completeness.",
                    "prerequisites": [
                        "CS 2510 or EECE 2160"
                    ]
                },
                {
                    "code": "CS 3950",
                    "title": "Introduction to Computer Science Research",
                    "credits": 2,
                    "description": "Introduces students to research in the fields of computer science, information science, data science, and cybersecurity. Explores how the scientific method is applied to these fields and covers the breadth of subareas of specialty that exist. Offers students an opportunity to practice how to locate and read scientific literature in different subareas. Also offers students an overview of graduate education in these fields.",
                    "prerequisites": [
                        "CS 2500"
                    ]
                },
                {
                    "code": "CS 4050",
                    "title": "Artificial Intelligence and Society",
                    "credits": 4,
                    "description": "Examines the societal impact of artificial intelligence technologies and prominent strategies for aligning these impacts with social and ethical values. Offers multidisciplinary readings to provide conceptual lenses for understanding these technologies in their contexts of use."
                },
                {
                    "code": "CS 4097",
                    "title": "Mixed Reality",
                    "credits": 4,
                    "description": "Seeks to provide a strong foundation in the fundamentals of virtual and augmented reality, broadly defined as mixed reality (XR). These technologies have recently witnessed a resurgence of interest. Offers students an opportunity to obtain hands-on experience developing XR applications by diving into this burgeoning area of research and practice in computer science. Synthesizes theoretical and practice knowledge from various disciplines, including computer graphics, 3D interfaces, human-computer interaction, tracking systems, and perceptual psychology.",
                    "prerequisites": [
                        "CS 3540"
                    ]
                },
                {
                    "code": "CS 4100",
                    "title": "Artificial Intelligence",
                    "credits": 4,
                    "description": "Introduces the fundamental problems, theories, and algorithms of the artificial intelligence field. Includes heuristic search; knowledge representation using predicate calculus; automated deduction and its applications; planning; and machine learning. Additional topics include game playing; uncertain reasoning and expert systems; natural language processing; logic for common-sense reasoning; ontologies; and multiagent systems.",
                    "prerequisites": [
                        "CS 3500 or DS 3500"
                    ],
                    "attributes": [
                        "NUpath Capstone Experience",
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4120",
                    "title": "Natural Language Processing",
                    "credits": 4,
                    "description": "Introduces the computational modeling of human language; the ongoing effort to create computer programs that can communicate with people in natural language; and current applications of the natural language field, such as automated document classification, intelligent query processing, and information extraction. Topics include computational models of grammar and automatic parsing, statistical language models and the analysis of large text corpora, natural language semantics and programs that understand language, models of discourse structure, and language use by intelligent agents. Course work includes formal and mathematical analysis of language models and implementation of working programs that analyze and interpret natural language text. Knowledge of statistics is helpful.",
                    "prerequisites": [
                        "CS 3500 or DS 3500"
                    ]
                },
                {
                    "code": "CS 4150",
                    "title": "Game Artificial Intelligence",
                    "credits": 4,
                    "description": "Offers an overview of classical and modern approaches to artificial intelligence in digital games. Focuses on the creation of believable agents and environments with the goal of providing a fun and engaging experience to a player. Covers player modeling, procedural content generation, behavior trees, interactive narrative, decision-making systems, cognitive modeling, and path planning. Explores different approaches for behavior generation, including learning and rule-based systems. Requires students to complete several individual assignments in these areas to apply the concepts covered in class. Students choose a group final project to explore one aspect of artificial intelligence for games in further depth. Offers students an opportunity to learn team management and communication. Students who do not meet course prerequisites may seek permission of instructor.",
                    "prerequisites": [
                        "CS 3500",
                        "CS 3520"
                    ],
                    "attributes": [
                        "NUpath Capstone Experience",
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4180",
                    "title": "Reinforcement Learning",
                    "credits": 4,
                    "description": "Introduces reinforcement learning and the Markov decision process (MDP) framework. Covers methods for planning and learning in MDPs such as dynamic programming, model-based methods, and model-free methods. Examines commonly used representations including deep-learning representations. Students are expected to have a working knowledge of probability, to complete programming assignments, and to complete a course project that applies some form of reinforcement learning to a problem of interest.",
                    "prerequisites": [
                        "CS 3000",
                        "ECON 2350 or ENVR 2500 or MATH 3081 or PSYC 2320 or CS 2810",
                        "MATH 2331 or CS 2810"
                    ]
                },
                {
                    "code": "CS 4300",
                    "title": "Computer Graphics",
                    "credits": 4,
                    "description": "Charts a path through every major aspect of computer graphics with varying degrees of emphasis. Discusses hardware issues: size and speed; lines, polygons, and regions; modeling, or objects and their relations; viewing, or what can be seen (visibility and perspective); rendering, or how it looks (properties of surfaces, light, and color); transformations, or moving, placing, distorting, and animating and interaction, or drawing, selecting, and transforming.",
                    "prerequisites": [
                        "CS 2510 or CS 3500 or EECE 2560",
                        "MATH 1260 or MATH 2331 or MATH 2341 or CS 2810"
                    ],
                    "attributes": [
                        "NUpath Capstone Experience",
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4360",
                    "title": "Non-Interactive Computer Graphics",
                    "credits": 4,
                    "description": "Introduces computer graphics algorithms and concepts primarily focusing on offline rendering techniques. Consists of a lecture component and in-class laboratory to study common image synthesis algorithms and techniques to generate images used in games and 3D animated movies. Culminates with a final project in which students complete in groups or individually a renderer for generating high quality images. Students with an interest in a career as a graphics, rendering, or high performance computer engineer may consider taking this course.",
                    "prerequisites": [
                        "CS 2810 or MATH 2331",
                        "CS 3500"
                    ]
                },
                {
                    "code": "CS 4400",
                    "title": "Programming Languages",
                    "credits": 4,
                    "description": "Introduces a systematic approach to understanding the behavior of programming languages. Covers interpreters; static and dynamic scope; environments; binding and assignment; functions and recursion; parameter-passing and method dispatch; objects, classes, inheritance, and polymorphism; type rules and type checking; and concurrency.",
                    "prerequisites": [
                        "CS 3500",
                        "CS 3000 or CS 4800"
                    ]
                },
                {
                    "code": "CS 4410",
                    "title": "Compilers",
                    "credits": 4,
                    "description": "Studies the construction of compilers and integrates material from earlier courses on programming languages, automata theory, computer architecture, and software design. Examines syntax trees; static semantics; type checking; typical machine architectures and their software structures; code generation; lexical analysis; and parsing techniques. Uses a hands-on approach with a substantial term project.",
                    "prerequisites": [
                        "CS 4400 or CS 5400 or CS 7400"
                    ],
                    "attributes": [
                        "NUpath Capstone Experience",
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4500",
                    "title": "Software Development",
                    "credits": 4,
                    "description": "Considers software development as a systematic process involving specification, design, documentation, implementation, testing, and maintenance. Examines software process models; methods for software specification; modularity, abstraction, and software reuse; and issues of software quality. Students, possibly working in groups, design, document, implement, test, and modify software projects.",
                    "prerequisites": [
                        "CS 3500",
                        "ENGW 1111 or ENGW 1102"
                    ],
                    "attributes": [
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4520",
                    "title": "Mobile Application Development",
                    "credits": 4,
                    "description": "Focuses on mobile application development on a mobile phone or related platform. Discusses memory management; user interface building, including both MVC principles and specific tools; touch events; data handling, including core data, SQL, XML, and JSON; network techniques and URL loading; and, finally, specifics such as GPS and motion sensing that may be dependent on the particular mobile platform. Students are expected to work on a project that produces a professional-quality mobile application. The instructor chooses a modern mobile platform to be used in the course.",
                    "prerequisites": [
                        "CS 3500"
                    ]
                },
                {
                    "code": "CS 4530",
                    "title": "Fundamentals of Software Engineering",
                    "credits": 4,
                    "description": "Covers the fundamentals of software engineering, including software development life cycle models (e.g., waterfall, spiral,agile); requirements analysis; user-centered design; software design principles and patterns; testing (functional testing, structural testing, testing strategies); code refactoring and debugging; software architecture and design; and integration and deployment. Includes a course project in which some of the software engineering methods (from requirements analysis to testing) are applied in a team-based setting.",
                    "prerequisites": [
                        "CS 3500"
                    ],
                    "attributes": [
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4535",
                    "title": "Professional Practicum Capstone",
                    "credits": 4,
                    "description": "Offers students an opportunity to expand skills in real-world application development and team collaboration within an experiential learning structure. Involves students in industry-specific projects designed to integrate into an industry partner's intellectual property portfolio. Projects focus on software design and development and also include written components that align with the partner's standards and reference relevant prior work. Students engage in a structured process of milestones and feedback cycles with peers; instructors; and, as appropriate, industry partners to refine project outcomes.",
                    "attributes": [
                        "NUpath Capstone Experience",
                        "NUpath Integration Experience",
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4550",
                    "title": "Web Development",
                    "credits": 4,
                    "description": "Discusses Web development for sites that are dynamic, data driven, and interactive. Focuses on the software development issues of integrating multiple languages, assorted data technologies, and Web interaction. Considers ASP.NET, C#, HTTP, HTML, CSS, XML, XSLT, JavaScript, AJAX, RSS/Atom, SQL, and Web services. Requires each student to deploy individually designed Web experiments that illustrate the Web technologies and at least one major integrative Web site project. Students may work as a team with the permission of the instructor. Each student or team must also create extensive documentation of their goals, plans, design decisions, accomplishments, and user guidelines. All source files must be open and be automatically served by a sources server.",
                    "prerequisites": [
                        "CS 3500 or DS 3500"
                    ],
                    "attributes": [
                        "NUpath Capstone Experience",
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4610",
                    "title": "Robotic Science and Systems",
                    "credits": 4,
                    "description": "Introduces autonomous mobile robots, with a focus on algorithms and software development, including closed-loop control, robot software architecture, wheeled locomotion and navigation, tactile and basic visual sensing, obstacle detection and avoidance, and grasping and manipulation of objects. Offers students an opportunity to progressively construct mobile robots from a predesigned electromechanical kit. The robots are controlled wirelessly by software of the students' own design, built within a provided robotics software framework. The course culminates in a grand challenge competition using all features of the robots.",
                    "prerequisites": [
                        "CS 3500"
                    ]
                },
                {
                    "code": "CS 4700",
                    "title": "Network Fundamentals",
                    "credits": 4,
                    "description": "Introduces the fundamental concepts of network protocols and network architectures. Presents the different harmonizing functions needed for the communication and effective operation of computer networks. Provides in-depth coverage of data link control, medium access control, routing, end-to-end transport protocols, congestion and flow control, multicasting, naming, auto configuration, quality of service, and network management. Studies the abstract mechanisms and algorithms as implemented in real-world Internet protocols. Also covers the most common application protocols (e-mail, Web, and ftp).",
                    "prerequisites": [
                        "CS 3650 or CS 5600"
                    ]
                },
                {
                    "code": "CS 4710",
                    "title": "Mobile and Wireless Systems",
                    "credits": 4,
                    "description": "Covers both theoretical foundations of wireless/mobile networking and practical aspects of wireless/mobile systems, including current standards, mobile development platforms, and emerging technologies. Incorporates a strong practical component; requires students to work in teams on several practical assignments (e.g., based on Wi-Fi sensing, mobile applications, Internet-of-Things devices, and software-defined radio applications) and a final project. The final project integrates knowledge about several wireless communication technologies and mechanisms.",
                    "prerequisites": [
                        "CS 3700 or CS 4730"
                    ]
                },
                {
                    "code": "CS 4730",
                    "title": "Distributed Systems",
                    "credits": 4,
                    "description": "Introduces distributed systems, covering fundamental concepts and showing how they are applied to build reliable distributed services. Examines several existing distributed applications, such as file systems, databases, lock services, digital currencies, smart contracts, and machine learning, and how these applications must coordinate to function and overcome failures, network partitions, or compromised parties. Distributed systems, such as databases, cloud services, and blockchains, are omnipresent in the services and applications that serve society on a daily basis.",
                    "prerequisites": [
                        "CS 3650"
                    ]
                },
                {
                    "code": "CS 4805",
                    "title": "Fundamentals of Complexity Theory",
                    "credits": 4,
                    "description": "Reviews basic material such as automata, Turing machines, (un)decidability, time complexity, P vs. NP, and NP-completeness. Studies core topics in computational complexity, including time and space complexity, polynomial hierarchy, circuit complexity, probabilistic computation, interactive proofs, and hardness of approximation. Optional topics may include Gödel's incompleteness theorem, Kolgomorov complexity, cryptography, quantum computing, communication complexity, lower bounds, or pseudorandomness.",
                    "prerequisites": [
                        "CS 3800"
                    ]
                },
                {
                    "code": "CS 4810",
                    "title": "Advanced Algorithms",
                    "credits": 4,
                    "description": "Builds on CS 3000. Presents an advanced study of computer algorithms. Covers basic algorithmic paradigms (e.g., greedy, divide-and-conquer, and dynamic programming); graph algorithms; optimization; computational Intractability (e.g., NP-completeness, PSPACE-completeness); randomized algorithms; and approximation algorithms.",
                    "prerequisites": [
                        "CS 3000"
                    ]
                },
                {
                    "code": "CS 4820",
                    "title": "Computer-Aided Reasoning",
                    "credits": 4,
                    "description": "Covers fundamental concepts, techniques, and algorithms in computer-aided reasoning, including propositional logic, variants of the DPLL algorithm for satisfiability checking, first-order logic, unification, tableaux, resolution, Horn clauses, congruence closure, rewriting, Knuth-Bendix completion, decision procedures, Satisfiability Modulo Theories, recursion, induction, termination, Presburger arithmetic, quantifier elimination, and interactive theorem proving. Offers students an opportunity to develop and implement a reasoning engine in a sequence of projects over the course of the semester. Also covers how to formalize and reason about computational systems using a modern interactive theorem prover.",
                    "prerequisites": [
                        "CS 2800",
                        "CS 3000"
                    ],
                    "attributes": [
                        "NUpath Capstone Experience"
                    ]
                },
                {
                    "code": "CS 4830",
                    "title": "System Specification, Verification, and Synthesis",
                    "credits": 4,
                    "description": "Covers the fundamental topics in formal modeling and specification (transition systems, temporal logic, regular and omega-regular languages, safety and liveness properties, etc.); computer-aided verification (state-space exploration, model checking, bounded-model checking, binary-decision diagrams, symbolic model checking, etc.); compositionality and assume-guarantee reasoning; contracts; and component-based design. Also covers fundamental topics in computer-aided synthesis of correct-by-construction systems, starting from high-level formal specifications or from example scenarios. Designing large and complex systems (digital circuits, embedded control systems such as automated vehicles, computerized healthcare devices such as pacemakers, cyber-physical systems such as automated intersections, etc.) and their software cannot be done by hand. Instead, designers use computer-aided techniques that allow them to build system models and verify correctness of the design before the real system is actually built.",
                    "prerequisites": [
                        "CS 3000"
                    ]
                },
                {
                    "code": "CS 4850",
                    "title": "Building Game Engines",
                    "credits": 4,
                    "description": "Discusses the components of game engines and strategies for their software implementation. Includes graphics management algorithms (animation, scene graph, level of detail); basic artificial intelligence algorithms (search, decision making, sensing); and related algorithmic issues (networking, threading, input processing). Explores the use of data-driven software design. Offers students an opportunity to use a rendering engine and to build and integrate several software components to create a complete game engine. Requires students to work on several individual assignments to apply the algorithms and then develop a project in a team. Offers students an opportunity to learn team/project management; work division; team communication; and the software development cycle of implementation, testing, critique, and further iteration. Students who do not meet course prerequisites may seek permission of instructor.",
                    "prerequisites": [
                        "CS 3520",
                        "CS 3540"
                    ]
                },
                {
                    "code": "CS 4950",
                    "title": "Computer Science Research Seminar",
                    "credits": 1,
                    "description": "Offers students an in-depth look at research in a particular subarea of computer science, information science, data science, or cybersecurity. The particular subarea varies from semester to semester. Exposes students to current research topics, often via guest faculty members. Offers students an opportunity to practice reading and discussing scientific literature, presenting scientific work, and distilling the key ideas and contributions of papers through required weekly paper summaries. May be repeated once.",
                    "prerequisites": [
                        "CS 3950"
                    ]
                },
                {
                    "code": "CS 4955",
                    "title": "Computer Science Teaching Seminar",
                    "credits": 1,
                    "description": "Introduces techniques and frameworks to prepare undergraduate students to become more effective teaching assistants in the field of computer science. Students analyze and reflect on literature, case studies, and real examples of teaching computer science. Offers students an opportunity to participate within in-class activities to learn presentation skills, to practice speaking to different audience sizes, and to learn how to work with different types of audiences. Culminates with a final capstone project in which students prepare and present a lecture on a topic in computer science. Successful students are prepared for careers in teaching, presenting technical content when pursuing graduate studies, and for presenting technical information in industry.",
                    "prerequisites": [
                        "CS 2500"
                    ]
                },
                {
                    "code": "CS 4970",
                    "title": "Junior/Senior Honors Project 1",
                    "credits": 4,
                    "description": "Focuses on in-depth project in which a student conducts research or produces a product related to the student's major field. Combined with Junior/Senior Project 2 or college-defined equivalent for 8 credit honors in the discipline project."
                },
                {
                    "code": "CS 4971",
                    "title": "Junior/Senior Honors Project 2",
                    "credits": 4,
                    "description": "Focuses on second semester of in-depth project in which a student conducts research or produces a product related to the student's major field.",
                    "prerequisites": [
                        "CS 4970"
                    ]
                },
                {
                    "code": "CS 4973",
                    "title": "Topics in Computer Science",
                    "credits": 4,
                    "description": "Offers a lecture course in computer science on a topic not regularly taught in a formal course. Topics may vary from offering to offering. May be repeated up to three times.",
                    "prerequisites": [
                        "CS 3000",
                        "CS 3500 or DS 3500"
                    ]
                },
                {
                    "code": "CS 4991",
                    "title": "Research",
                    "credits": "4,8",
                    "description": "Offers an opportunity to conduct research under faculty supervision. May be repeated up to three times.",
                    "prerequisites": [
                        "CS 3500",
                        "CS 3800"
                    ],
                    "attributes": [
                        "NUpath Capstone Experience",
                        "NUpath Integration Experience",
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "CS 4998",
                    "title": "Research",
                    "credits": 0,
                    "description": "Offers an opportunity to document student contributions to research projects or creative endeavors."
                }
            ]
        },
        {
            "name": "Information Science",
            "courses": [
                {
                    "code": "IS 1300",
                    "title": "Knowledge in a Digital World",
                    "credits": 4,
                    "description": "Examines the impact that information technologies (such as the internet, search engines, blogs, wikis, and smartphones); information processing techniques (such as big data analysis, machine learning, crowdsourcing, and cryptography); and information policies (such as privacy norms and speech restrictions) have on what we know and how much we know, as individuals and as a society. The digital world can enhance our ability to acquire knowledge by providing us with fast and cheap access to huge amounts of information. However, it can also undermine our cognitive abilities and provide us with inaccurate or misleading information. Studies normative frameworks from epistemology and ethics (such as epistemic value theory, the extended mind hypothesis, and moral rights) to evaluate these technologies and policies.",
                    "attributes": [
                        "NUpath Ethical Reasoning",
                        "NUpath Societies/Institutions"
                    ]
                },
                {
                    "code": "IS 1500",
                    "title": "Introduction to Web Development",
                    "credits": 4,
                    "description": "Introduces Web development and networks. Discusses HTML5, CSS, and client-side scripting with JavaScript and jQuery; embedding of media: images, video, and sound; the use of back-end data (either from databases or XML) to create dynamic Web sites; Web hosting, operating systems, and network infrastructure; and the automation of website construction using content management systems. Considers the construction of Web forms and the underlying protocols for information exchange: HTTP and HTTPS. Emphasizes the need for testing both correctness and usability. Offers a brief introduction to server-side scripting. Surveys the security problems faced by dynamic websites. Hands-on laboratory work is built into the course. May be taken as a general elective by CCIS students but does not count as a CS or IS elective.",
                    "attributes": [
                        "NUpath Analyzing/Using Data"
                    ]
                },
                {
                    "code": "IS 2000",
                    "title": "Principles of Information Science",
                    "credits": 4,
                    "description": "Introduces information science. Examines how information is used to solve problems both for individuals and organizations and how information systems interface with their users. Considers the technical, economic, social, and ethical issues that arise when working with information. Discusses how to collect, manage, classify, store, encode, transmit, retrieve, and evaluate data and information with appropriate security and privacy. Storage models include lists, tables, and trees (hierarchies). Examines applications of information: visualization, presentation, categorization, decision making, and predictive modeling. Introduces key concepts in probability. Explains Bayesian analysis for information classification and modeling. Teaches intensive programming in Excel, including VBA macro development. Introduces programming in R.",
                    "attributes": [
                        "NUpath Analyzing/Using Data"
                    ]
                },
                {
                    "code": "IS 2050",
                    "title": "Information and Uncertainty",
                    "credits": 4,
                    "description": "Introduces the foundations of probabilistic inference, information theory, and their uses for drawing conclusions from noisy data. Applications include diagnosing diseases with inconclusive medical tests, locating autonomous vehicles when sensors are imperfect, and how best to make inferences with incomplete or partial information. Central topics include distinguishing deductive and probabilistic inference, philosophical interpretations of probability, fundamental justifications for the rules of probability, and key concepts of information theory. Introduces analytic and mathematical methods of analysis in these cases and contemporary computational (i.e., programming) techniques for implementing and applying theories of information and probabilistic inference.",
                    "attributes": [
                        "NUpath Analyzing/Using Data",
                        "NUpath Formal/Quant Reasoning"
                    ]
                },
                {
                    "code": "IS 3050",
                    "title": "Information and Uncertainty",
                    "credits": 4,
                    "description": "Introduces the foundations of probabilistic inference, information theory, and their uses for drawing conclusions from noisy data. Applications include diagnosing diseases with inconclusive medical tests, locating autonomous vehicles when sensors are imperfect, and how best to make inferences with incomplete or partial information. Central topics include distinguishing deductive and probabilistic inference, philosophical interpretations of probability, fundamental justifications for the rules of probability, and key concepts of information theory. Introduces analytic and mathematical methods of analysis in these cases and contemporary computational (i.e., programming) techniques for implementing and applying theories of information and probabilistic inference.",
                    "attributes": [
                        "NUpath Analyzing/Using Data",
                        "NUpath Formal/Quant Reasoning"
                    ]
                },
                {
                    "code": "IS 3500",
                    "title": "Information System Design and Development",
                    "credits": 4,
                    "description": "Discusses the planning, analysis, design, and implementation of computer-based information systems, focusing on the methodologies and procedures used in organizational problem solving and systems development. Topics include the systems development life cycle; project management; requirements analysis and specification; feasibility and cost-benefit analysis; logical and physical design; prototyping; and system validation, deployment, and postimplementation review. Additional topics may include platform and database selection and integration issues; CASE tools; end-user training; maintenance; and object-oriented analysis and design.",
                    "prerequisites": [
                        "IS 2000",
                        "CS 3500",
                        "ENGL 1102 or ENGL 1111 or ENGW 1102 or ENGW 1111 or ENGW 1113 or ENGW 1114"
                    ],
                    "attributes": [
                        "NUpath Writing Intensive"
                    ]
                },
                {
                    "code": "IS 4200",
                    "title": "Information Retrieval",
                    "credits": 4,
                    "description": "Introduces information retrieval (IR) systems and different approaches to IR. Topics covered include evaluation of IR systems; retrieval, language, and indexing models; file organization; compression; relevance feedback; clustering; distributed retrieval and metasearch; probabilistic approaches to IR; Web retrieval; filtering, collaborative filtering, and recommendation systems; cross-language IR; multimedia IR; and machine learning for IR.",
                    "prerequisites": [
                        "CS 3500 or DS 3500",
                        "CS 2810 or ECON 2350 or MATH 2280 or MATH 3081 or MGSC 2301 or PSYC 2320"
                    ]
                },
                {
                    "code": "IS 4300",
                    "title": "Human Computer Interaction",
                    "credits": 4,
                    "description": "Studies the principles of human-computer interaction and the practice of user interface design. Discusses the major human information processing subsystems (perception, memory, attention, and problem solving), and how the properties of these systems influence the design of interactive systems. Reviews guidelines and specification languages for designing user interfaces, with an emphasis on tool kits of standard graphical user interface (GUI) objects. Introduces usability metrics and evaluation methods. Additional topics may include World Wide Web design principles and tools; wireless/mobile device interfaces; computer-supported cooperative work; information visualization; and virtual reality. Course work includes designing user interfaces, creating working prototypes using a GUI tool kit, and evaluating existing interfaces using the methods studied.",
                    "prerequisites": [
                        "CS 3500 or DS 3500"
                    ]
                },
                {
                    "code": "IS 4800",
                    "title": "Empirical Research Methods",
                    "credits": 4,
                    "description": "Evaluates and conducts empirical research, focusing on students' use of empirical methods to study the effectiveness and organizational/social impact of information systems and technologies. Empirical research involves a number of broad steps including identifying problems; developing specific hypotheses; collecting data relevant to the hypotheses; analyzing the data; and considering alternative explanations for the empirical findings. Some of the most commonly used research techniques, such as surveys, experiments, and ethnographic methods, are discussed. Additional topics include the ethics of data collection and experimentation in behavioral science. Although the course focuses primarily on the relationship between formulating research questions and implementing the appropriate methods to answer them, students can expect to apply the statistical techniques learned in the course prerequisites.",
                    "prerequisites": [
                        "CS 2810 or ECON 2350 or ENVR 2500 or MATH 2280 or MATH 3081 or MGSC 2301 or PHTH 2210 or PSYC 2320"
                    ]
                }
            ]
        }
    ]
}